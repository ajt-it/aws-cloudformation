
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Infrastructure Template for launching a WordPress website


Resources:

  ########## CREATE SUBNETS CIDR

  # - PUBLIC SUBNETS
  PublicSubnet1CIDR:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: 'p10aic-VPC public subnet 1'
      VpcId: !Ref VPC

  # - PRIVATE SUBNETS  

  PrivateSubnet2CIDR:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: 'p10aic-VPC private subnet 2'    
      VpcId: !Ref VPC	

  # - DATABASE SUBNETS
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      DBSubnetGroupName: RDS-Subnets
      SubnetIds:
        - !Ref PrivateSubnet1CIDR
        - !Ref PrivateSubnet2CIDR       


  ########## CREATE ROUTE TABLE

  # Create Route Table 1
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "p10aic-VPC public route 1"

  # Create Route Table 2
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "p10aic-VPC public route 2"   


  ########## CREATE ROUTES

  PublicRoute1:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref p10aicInternetGateway
      RouteTableId: !Ref PublicRouteTable1      

  PublicRoute2:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref p10aicInternetGateway
      RouteTableId: !Ref PublicRouteTable2   

  

  ########## CREATE BUCKET S3 & BUCKET POLICY

  BucketS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: p10aic-bucket-wp

  ########## ELASTIC LOAD BALANCER & AUTO SCALING GROUP

  WebsiteLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: DatabaseInstance
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-0ac43988dfd31ab9a
      InstanceType: t2.micro
      KeyName: MasterKey
      SecurityGroups:
        - !Ref WebsiteEC2SecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum upgrade -y         
          sudo rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm         
          sudo yum install -y mysql-server         
          sudo yum install -y mysql-client         
          sudo yum install php-curl -y


  ########## Creates Auto Scaling Group

  WebsiteAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebsiteLaunchConfig
      AvailabilityZones:
        - Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
        - Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1CIDR
        - !Ref PublicSubnet2CIDR      
      DesiredCapacity: 1
      MaxSize: 2
      MinSize: 1  
      TargetGroupARNs:
        - !Ref WebsiteTargetGroup


  ########## CREATE A LISTNER ON PORT 80
  
  WebsiteLoadBalancer:
    DependsOn: 
      - PublicSubnet1CIDR
      - PublicSubnet2CIDR
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebsiteLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1CIDR
        - !Ref PublicSubnet2CIDR

  WebsiteLoadBlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref WebsiteLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebsiteTargetGroup


  ########## CREATE DATABASE

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: true
      DBInstanceClass: db.t2.micro
      DBName: "wordpress"
      DBInstanceIdentifier: wordpress
      Engine: MySQL
      AvailabilityZone: eu-west-1a
      MasterUsername: wordpress
      MasterUserPassword: password
      AllocatedStorage: '20'
      BackupRetentionPeriod: 7 
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Tags:
        - Key: Name
          Value: wordpress database


  ########## AUTO SCALING GROUP RULES

  WebsiteScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebsiteAutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: 1

  WebsiteScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebsiteAutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: -1



Outputs:
  VPC:
    Description: VPC - P10_AIC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC